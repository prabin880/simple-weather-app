{"version":3,"sources":["Container.js","App.js","reportWebVitals.js","index.js"],"names":["Container","name","temp","weather","className","App","today","Date","toLocaleTimeString","weekday","year","month","day","hour","minute","useState","value","setValue","setTemp","location","setLocation","showTemp","setShowTemp","setWeather","cityName","setCityName","result","setResult","showArea","setShowArea","selectCity","city","fetch","process","then","response","ok","json","data","main","catch","err","console","log","useLatLon","navigator","geolocation","getCurrentPosition","position","latitude","coords","longitude","window","onload","Particles","init","selector","maxParticles","color","connectParticles","minDistance","responsive","breakpoint","options","useEffect","lat","lon","resolve","Object","keys","length","onClick","onSubmit","e","preventDefault","onChange","target","type","placeholder","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.371bb8fc.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Container = ({ name, temp, weather }) => {\r\n\treturn (\r\n\t\t<div className=\"container\">\r\n\t\t\t<div className=\"weather_icon\">\r\n\t\t\t\t<h3>\r\n\t\t\t\t\tTemperature: {temp['temp']}&deg;C{' '}\r\n\t\t\t\t\t{/* {weather.icon && (\r\n\t\t\t\t\t\t<img\r\n\t\t\t\t\t\t\tsrc={`http://openweathermap.org/img/wn/${weather.icon}@2x.png`}\r\n\t\t\t\t\t\t\talt=\"\"\r\n\t\t\t\t\t\t/>\r\n\t\t\t\t\t)} */}\r\n\t\t\t\t</h3>\r\n\t\t\t</div>\r\n\r\n\t\t\t<h3>Feels like: {temp['feels_like']}&deg;C</h3>\r\n\t\t\t<h3>Humidity: {temp['humidity']}%</h3>\r\n\t\t\t<h3>Weather: {weather['main']}</h3>\r\n\t\t\t<h3>City or Area: {name}</h3>\r\n\t\t</div>\r\n\t);\r\n};\r\n\r\nexport default Container;\r\n","import React, { useEffect, useState } from 'react';\nimport './App.css';\nimport Container from './Container';\nimport Particles from 'particlesjs';\n\nexport default function App() {\n\tlet date = new Date();\n\tlet options = {\n\t\tweekday: 'short',\n\t\tyear: 'numeric',\n\t\tmonth: 'short',\n\t\tday: 'numeric',\n\t\thour: '2-digit',\n\t\tminute: '2-digit',\n\t};\n\n\tconst today = date.toLocaleTimeString('en-au', options);\n\tconst [value, setValue] = useState('');\n\tconst [temp, setTemp] = useState({});\n\tconst [location, setLocation] = useState([]);\n\tconst [showTemp, setShowTemp] = useState(false);\n\tconst [weather, setWeather] = useState({});\n\tconst [cityName, setCityName] = useState('');\n\tconst [result, setResult] = useState(false);\n\tconst [showArea, setShowArea] = useState(false);\n\n\tfunction selectCity(city) {\n\t\tconst key = process.env.REACT_APP_API_KEY;\n\t\tfetch(\n\t\t\t`https://api.openweathermap.org/data/2.5/weather?q=${city}&units=metric&appid=${key}`\n\t\t)\n\t\t\t.then(response => {\n\t\t\t\tif (response.ok) {\n\t\t\t\t\treturn response.json();\n\t\t\t\t} else {\n\t\t\t\t\tsetShowTemp(false);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.then(data => {\n\t\t\t\tif (data) {\n\t\t\t\t\tsetTemp(data.main);\n\t\t\t\t\tsetWeather(data.weather[0]);\n\t\t\t\t\tsetCityName(data.name);\n\t\t\t\t}\n\t\t\t})\n\t\t\t.catch(err => console.log(err));\n\t}\n\n\twindow.onload = () => {\n\t\tParticles.init({\n\t\t\t// normal options\n\t\t\tselector: '.background',\n\t\t\tmaxParticles: 350,\n\t\t\tcolor: ['#DA0463', '#404B69', '#61045f'],\n\t\t\tconnectParticles: true,\n\t\t\tminDistance: 150,\n\n\t\t\t// options for breakpoints\n\t\t\tresponsive: [\n\t\t\t\t{\n\t\t\t\t\tbreakpoint: 768,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tmaxParticles: 200,\n\t\t\t\t\t\tcolor: '#48F2E3',\n\t\t\t\t\t\tconnectParticles: false,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tbreakpoint: 425,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tmaxParticles: 100,\n\t\t\t\t\t\tconnectParticles: true,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\tbreakpoint: 320,\n\t\t\t\t\toptions: {\n\t\t\t\t\t\tmaxParticles: 0,\n\n\t\t\t\t\t\t// disables particles.js\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\t\tselectCity('London');\n\t};\n\n\tfunction useLatLon() {\n\t\tif ('geolocation' in navigator) {\n\t\t\tnavigator.geolocation.getCurrentPosition(position => {\n\t\t\t\tconst latitude = position.coords.latitude;\n\t\t\t\tconst longitude = position.coords.longitude;\n\n\t\t\t\tsetLocation([latitude, longitude]);\n\t\t\t});\n\t\t} else {\n\t\t\treturn 'Failed to read location...';\n\t\t}\n\t}\n\n\tuseEffect(() => {\n\t\tif (location) {\n\t\t\tconst lat = location[0];\n\t\t\tconst lon = location[1];\n\t\t\tconst key = process.env.REACT_APP_API_KEY;\n\t\t\tif (lat && lon) {\n\t\t\t\tfetch(\n\t\t\t\t\t`http://api.openweathermap.org/data/2.5/weather?lat=${lat}&lon=${lon}&units=metric&appid=${key}`\n\t\t\t\t)\n\t\t\t\t\t.then(resolve => resolve.json())\n\t\t\t\t\t.then(data => {\n\t\t\t\t\t\tsetTemp(data.main);\n\t\t\t\t\t\tsetWeather(data.weather[0]);\n\t\t\t\t\t\tsetCityName(data.name);\n\t\t\t\t\t})\n\t\t\t\t\t.catch(err => {\n\t\t\t\t\t\tthrow err;\n\t\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}, [location]);\n\n\tuseEffect(() => {\n\t\tif (Object.keys(temp).length && cityName) {\n\t\t\tsetShowTemp(true);\n\t\t}\n\t}, [temp, weather, cityName]);\n\n\tuseEffect(() => {\n\t\tif (result) {\n\t\t\tselectCity(result);\n\t\t}\n\t}, [result]);\n\n\tuseEffect(() => {\n\t\tif (showArea) {\n\t\t\tsetLocation(useLatLon);\n\t\t}\n\t}, [showArea]);\n\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<div className=\"weather__info\">\n\t\t\t\t<h4>{today}</h4>\n\t\t\t\t<button onClick={() => setShowArea(true)}>\n\t\t\t\t\tGet Weather In Your Area\n\t\t\t\t</button>\n\n\t\t\t\t<br />\n\n\t\t\t\t<form\n\t\t\t\t\tonSubmit={e => {\n\t\t\t\t\t\te.preventDefault();\n\t\t\t\t\t\tsetResult(value);\n\t\t\t\t\t\tsetValue('');\n\t\t\t\t\t}}\n\t\t\t\t\tclassName=\"form\"\n\t\t\t\t>\n\t\t\t\t\t<input\n\t\t\t\t\t\tvalue={value}\n\t\t\t\t\t\tonChange={e => setValue(e.target.value)}\n\t\t\t\t\t\ttype=\"text\"\n\t\t\t\t\t\tplaceholder=\"Search by city...\"\n\t\t\t\t\t/>\n\t\t\t\t\t<button type=\"submit\">Search</button>\n\t\t\t\t</form>\n\n\t\t\t\t{showTemp ? (\n\t\t\t\t\t<Container name={cityName} temp={temp} weather={weather} />\n\t\t\t\t) : (\n\t\t\t\t\t<h3>Sorry, couldn't fetch the weather info</h3>\n\t\t\t\t)}\n\t\t\t</div>\n\n\t\t\t<canvas className=\"background\"></canvas>\n\t\t</div>\n\t);\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}